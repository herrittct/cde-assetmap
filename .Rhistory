addLegend("topleft",
group = "CEP",
pal = isp_pal,
values = ~ isp_district*100,
title = "Identified <br> Student <br> Percentage",
opacity = 1) %>%
addPolygons(popup = mapping_profiles_popup_score_components,
group = "Total Score",
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.6,
color = ~ total_score_pal(total_score)) %>%
addLegend("topleft",
group = "Total Score",
pal = total_score_pal,
values = ~ total_score,
title = "Total Score",
opacity = 1) %>%
addLayersControl(
overlayGroups = c("Total Score", "CEP", "Programs"),
options = layersControlOptions(collapsed = FALSE, position = "topleft")) %>%
hideGroup(c("CEP", "Programs"))
score_cep_leaflet
score_cep_leaflet <-
mapping_profiles %>%
leaflet(options = leafletOptions(minZoom = 6)) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(popup = mapping_profiles_popups_total_score ,
group = "Programs",
stroke = TRUE,
weight = 1,
smoothFactor = 0,
fillOpacity = 0.4,
dashArray = '20 10',
fillColor = ~ programs_pal(nslp_sbp_asp_sfsp)) %>%
addLegend("topleft",
group = "Programs",
pal = programs_pal,
values = ~nslp_sbp_asp_sfsp,
title = "Has all 4 programs <br> NSLP <br> SBP <br> ASP <br> SFSP",
opacity = 1) %>%
addPolygons(popup = cep_profiles_popups ,
group = "CEP",
#stroke = FALSE,
stroke = TRUE,
smoothFactor = 0,
fillOpacity = 0.6,
FillColor = ~ isp_pal(isp_district*100)) %>%
addLegend("topleft",
group = "CEP",
pal = isp_pal,
values = ~ isp_district*100,
title = "Identified <br> Student <br> Percentage",
opacity = 1) %>%
addPolygons(popup = mapping_profiles_popup_score_components,
group = "Total Score",
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.6,
fillColor = ~ total_score_pal(total_score)) %>%
addLegend("topleft",
group = "Total Score",
pal = total_score_pal,
values = ~ total_score,
title = "Total Score",
opacity = 1) %>%
addLayersControl(
overlayGroups = c("Total Score", "CEP", "Programs"),
options = layersControlOptions(collapsed = FALSE, position = "topleft")) %>%
hideGroup(c("CEP", "Programs"))
score_cep_leaflet <-
mapping_profiles %>%
leaflet(options = leafletOptions(minZoom = 6)) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(popup = mapping_profiles_popups_total_score ,
group = "Programs",
stroke = TRUE,
weight = 1,
smoothFactor = 0,
fillOpacity = 0.4,
dashArray = '20 10',
fillColor = ~ programs_pal(nslp_sbp_asp_sfsp)) %>%
addLegend("topleft",
group = "Programs",
pal = programs_pal,
values = ~nslp_sbp_asp_sfsp,
title = "Has all 4 programs <br> NSLP <br> SBP <br> ASP <br> SFSP",
opacity = 1) %>%
addPolygons(popup = cep_profiles_popups ,
group = "CEP",
#stroke = FALSE,
stroke = TRUE,
smoothFactor = 0,
fillOpacity = 0.6,
fillColor = ~ isp_pal(isp_district*100)) %>%
addLegend("topleft",
group = "CEP",
pal = isp_pal,
values = ~ isp_district*100,
title = "Identified <br> Student <br> Percentage",
opacity = 1) %>%
addPolygons(popup = mapping_profiles_popup_score_components,
group = "Total Score",
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.6,
fillColor = ~ total_score_pal(total_score)) %>%
addLegend("topleft",
group = "Total Score",
pal = total_score_pal,
values = ~ total_score,
title = "Total Score",
opacity = 1) %>%
addLayersControl(
overlayGroups = c("Total Score", "CEP", "Programs"),
options = layersControlOptions(collapsed = FALSE, position = "topleft")) %>%
hideGroup(c("CEP", "Programs"))
score_cep_leaflet
score_cep_leaflet <-
mapping_profiles %>%
leaflet(options = leafletOptions(minZoom = 6)) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(popup = mapping_profiles_popups_total_score ,
group = "Programs",
stroke = TRUE,
weight = 1,
smoothFactor = 0,
color = "#FFFFFF"
fillOpacity = 0.4,
dashArray = '20 10',
fillColor = ~ programs_pal(nslp_sbp_asp_sfsp)) %>%
addLegend("topleft",
group = "Programs",
pal = programs_pal,
values = ~nslp_sbp_asp_sfsp,
title = "Has all 4 programs <br> NSLP <br> SBP <br> ASP <br> SFSP",
opacity = 1) %>%
addPolygons(popup = cep_profiles_popups ,
group = "CEP",
#stroke = FALSE,
stroke = TRUE,
smoothFactor = 0,
fillOpacity = 0.6,
fillColor = ~ isp_pal(isp_district*100)) %>%
addLegend("topleft",
group = "CEP",
pal = isp_pal,
values = ~ isp_district*100,
title = "Identified <br> Student <br> Percentage",
opacity = 1) %>%
addPolygons(popup = mapping_profiles_popup_score_components,
group = "Total Score",
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.6,
fillColor = ~ total_score_pal(total_score)) %>%
addLegend("topleft",
group = "Total Score",
pal = total_score_pal,
values = ~ total_score,
title = "Total Score",
opacity = 1) %>%
addLayersControl(
overlayGroups = c("Total Score", "CEP", "Programs"),
options = layersControlOptions(collapsed = FALSE, position = "topleft")) %>%
hideGroup(c("CEP", "Programs"))
score_cep_leaflet <-
mapping_profiles %>%
leaflet(options = leafletOptions(minZoom = 6)) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(popup = mapping_profiles_popups_total_score ,
group = "Programs",
stroke = TRUE,
weight = 1,
smoothFactor = 0,
color = "#FFFFFF",
fillOpacity = 0.4,
dashArray = '20 10',
fillColor = ~ programs_pal(nslp_sbp_asp_sfsp)) %>%
addLegend("topleft",
group = "Programs",
pal = programs_pal,
values = ~nslp_sbp_asp_sfsp,
title = "Has all 4 programs <br> NSLP <br> SBP <br> ASP <br> SFSP",
opacity = 1) %>%
addPolygons(popup = cep_profiles_popups ,
group = "CEP",
#stroke = FALSE,
stroke = TRUE,
smoothFactor = 0,
fillOpacity = 0.6,
fillColor = ~ isp_pal(isp_district*100)) %>%
addLegend("topleft",
group = "CEP",
pal = isp_pal,
values = ~ isp_district*100,
title = "Identified <br> Student <br> Percentage",
opacity = 1) %>%
addPolygons(popup = mapping_profiles_popup_score_components,
group = "Total Score",
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.6,
fillColor = ~ total_score_pal(total_score)) %>%
addLegend("topleft",
group = "Total Score",
pal = total_score_pal,
values = ~ total_score,
title = "Total Score",
opacity = 1) %>%
addLayersControl(
overlayGroups = c("Total Score", "CEP", "Programs"),
options = layersControlOptions(collapsed = FALSE, position = "topleft")) %>%
hideGroup(c("CEP", "Programs"))
score_cep_leaflet
score_cep_leaflet <-
mapping_profiles %>%
leaflet(options = leafletOptions(minZoom = 6)) %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(popup = mapping_profiles_popups_total_score ,
group = "Programs",
stroke = TRUE,
weight = 1,
smoothFactor = 0,
color = "#FFFFFF",
fillOpacity = 0.4,
dashArray = '20 5',
fillColor = ~ programs_pal(nslp_sbp_asp_sfsp)) %>%
addLegend("topleft",
group = "Programs",
pal = programs_pal,
values = ~nslp_sbp_asp_sfsp,
title = "Has all 4 programs <br> NSLP <br> SBP <br> ASP <br> SFSP",
opacity = 1) %>%
addPolygons(popup = cep_profiles_popups ,
group = "CEP",
stroke = TRUE,
weight = 1,
smoothFactor = 0,
color = "#FFFFFF",
fillOpacity = 0.4,
dashArray = '20 5',
fillColor = ~ isp_pal(isp_district*100)) %>%
addLegend("topleft",
group = "CEP",
pal = isp_pal,
values = ~ isp_district*100,
title = "Identified <br> Student <br> Percentage",
opacity = 1) %>%
addPolygons(popup = mapping_profiles_popup_score_components,
group = "Total Score",
stroke = TRUE,
weight = 1,
smoothFactor = 0,
color = "#FFFFFF",
fillOpacity = 0.4,
dashArray = '20 5',
fillColor = ~ total_score_pal(total_score)) %>%
addLegend("topleft",
group = "Total Score",
pal = total_score_pal,
values = ~ total_score,
title = "Total Score",
opacity = 1) %>%
addLayersControl(
overlayGroups = c("Total Score", "CEP", "Programs"),
options = layersControlOptions(collapsed = FALSE, position = "topleft")) %>%
hideGroup(c("CEP", "Programs"))
score_cep_leaflet
mapping_profiles %>%
filter(school_year == 2017) %>%
ggplot() +
geom_histogram(aes(x = Scored_district_size )) +
facet_wrap(~ifelse(nslp_sbp_asp_sfsp,
"Has All Four Programs",
"Does Not Have All Programs")) +
labs(title = "Figure 1. Public School Districts Currently Operating All Four \nKey Programs Compared to Scored District Size",
subtitle = "Key Programs: NSLP, SBP, ASP, SFSP.\nOperating in at least 1 school",
x = "District Size score",
y = "Number of Districts",
caption = " Based on 2017 data") +
theme_minimal() +
theme(plot.title = element_text(size = 20, face = "bold"))
mapping_profiles %>%
filter(school_year == 2016) %>%
ggplot() +
geom_histogram(aes(x = Scored_district_size )) +
facet_wrap(~nslp_sbp_asp) +
labs(title = "Has 3 key programs compared to scored district size",
subtitle = " NSLP, SBP, ASP",
x = "District Size score",
y = "Number of Districts",
caption = " Based on 2016 data") +
theme_minimal()
mapping_profiles %>%
filter(school_year == 2016) %>%
ggplot() +
geom_histogram(aes(x = Scored_district_size )) +
facet_wrap(~nslp_sbp) +
labs(title = "Has primary programs compared to scored district size",
subtitle = " NSLP, SBP",
x = "District Size score",
y = "Number of Districts",
caption = " Based on 2016 data")
mapping_profiles %>%
filter(school_year == 2016) %>%
ggplot() +
geom_histogram(aes(x = rural_urban_score )) +
facet_wrap(~nslp_sbp) +
labs(title = "Has primary programs compared to scored district size",
subtitle = " NSLP, SBP",
x = "District Size score",
y = "Number of Districts",
caption = " Based on 2016 data")
mapping_profiles %>%
filter(school_year == 2016) %>%
ggplot() +
geom_histogram(aes(x = rural_urban )) +
facet_wrap(~nslp_sbp) +
labs(title = "Has primary programs compared to scored district size",
subtitle = " NSLP, SBP",
x = "District Size score",
y = "Number of Districts",
caption = " Based on 2016 data")
mapping_profiles %>%
filter(school_year == 2016) %>%
ggplot() +
geom_histogram(aes(x = urban_rural)) +
facet_wrap(~nslp_sbp) +
labs(title = "Has primary programs compared to scored district size",
subtitle = " NSLP, SBP",
x = "District Size score",
y = "Number of Districts",
caption = " Based on 2016 data")
mapping_profiles %>%
filter(school_year == 2016) %>%
ggplot() +
geom_histogram(aes(x = urban_rural)) +
facet_wrap(~nslp_sbp) +
labs(title = "Has primary programs compared to scored district size",
subtitle = " NSLP, SBP",
x = "District Size score",
y = "Number of Districts",
caption = " Based on 2016 data")
mapping_profiles %>%
filter(school_year == 2016) %>%
ggplot() +
geom_histogram(aes(x = Scored_urban_rural)) +
facet_wrap(~nslp_sbp) +
labs(title = "Has primary programs compared to scored district size",
subtitle = " NSLP, SBP",
x = "District Size score",
y = "Number of Districts",
caption = " Based on 2016 data")
mapping_profiles %>%
filter(school_year == 2016) %>%
ggplot() +
geom_histogram(aes(x = Scored_rural_urban)) +
facet_wrap(~nslp_sbp) +
labs(title = "Has primary programs compared to scored district size",
subtitle = " NSLP, SBP",
x = "District Size score",
y = "Number of Districts",
caption = " Based on 2016 data")
mapping_profiles %>%
filter(school_year == 2016) %>%
ggplot() +
geom_histogram(aes(x = Scored_rural_urban)) +
facet_wrap(~nslp_sbp)
mapping_profiles %>%
filter(school_year == 2016) %>%
ggplot() +
geom_histogram(aes(x = Scored_rural_urban)) +
geom_histogram(aes(x = urban_rural)) +
facet_wrap(~nslp_sbp)
mapping_profiles %>%
filter(school_year == 2016) %>%
ggplot() +
#geom_histogram(aes(x = Scored_rural_urban)) +
geom_histogram(aes(x = urban_rural)) +
facet_wrap(~nslp_sbp)
mapping_profiles %>%
filter(school_year == 2016) %>%
ggplot() +
#geom_histogram(aes(x = Scored_rural_urban)) +
geom_histogram(aes(x = urban_rural), stat = "count") +
facet_wrap(~nslp_sbp)
mapping_profiles %>%
filter(school_year == 2016) %>%
ggplot() +
#geom_histogram(aes(x = Scored_rural_urban)) +
geom_histogram(aes(x = urban_rural), stat = "count") +
facet_wrap(~snack)
t.test(mapping_profiles$snack, mapping_profiles$urban_rural)
t.test(mapping_profiles$snack, mapping_profiles$urban_rural, naignore= TRUE)
mapping_profiles %>%
filter(school_year == 2016) %>%
ggplot() +
#geom_histogram(aes(x = Scored_rural_urban)) +
geom_histogram(aes(x = urban_rural), stat = "count") +
facet_wrap(~snack)
htmlwidgets::saveWidget(score_cep_leaflet,
file = "Capstone.html",
selfcontained= TRUE)
# District Size Map
mapping_profiles_levels_testing %>%
filter(school_year == 2017) %>%
ggplot() +
geom_sf(aes(fill = Scored_district_size)) +
labs(caption = " Based on 2017-2018 data") +
ggtitle(label = "School District Population (2017) ",
subtitle = "District Population separated into district \nsize groupings according to CDE size cutoffs") +
guides(fill = guide_legend( title = "Student Population",
title.theme = element_text(
size = 15,
face = "italic",
angle = 0)), nrow = 6) +
scale_fill_viridis_d(labels = c(
"<50", "51-500","501-1000", "1001-5000",
"5001-10000", ">10000" )) +
theme_void() +
theme(plot.title = element_text(size = 20, face = "bold"),
axis.ticks = element_blank(),
rect = element_blank(),
panel.grid.major = element_line(colour = 'transparent'))
mapping_profiles_levels_testing <- mapping_profiles %>%
mutate(Scored_district_size = factor(Scored_district_size, ordered = TRUE, levels = size_vectors_2))
size_vectors <- c("<50", "51-500","501-1000", "1001-5000", "5001-10000", ">10000" )
size_vectors_2 <- list(0.33= "<50",
0.67 = "51-500",
1 = "501-1000",
1.34 = "1001-5000",
1.67 = "5001-10000",
2 = ">10000")
size_vectors_2 <- c( "<50" = 0.33,
"51-500" = 0.67,
"501-1000" = 1,
"1001-5000" = 1.34,
"5001-10000" = 1.67,
">10000" = 2)
mapping_profiles_levels_testing <- mapping_profiles %>%
mutate(Scored_district_size = factor(Scored_district_size, ordered = TRUE, levels = size_vectors_2))
# District Size Map
mapping_profiles_levels_testing %>%
filter(school_year == 2017) %>%
ggplot() +
geom_sf(aes(fill = Scored_district_size)) +
labs(caption = " Based on 2017-2018 data") +
ggtitle(label = "School District Population (2017) ",
subtitle = "District Population separated into district \nsize groupings according to CDE size cutoffs") +
guides(fill = guide_legend( title = "Student Population",
title.theme = element_text(
size = 15,
face = "italic",
angle = 0)), nrow = 6) +
scale_fill_viridis_d(labels = c(
"<50", "51-500","501-1000", "1001-5000",
"5001-10000", ">10000" )) +
theme_void() +
theme(plot.title = element_text(size = 20, face = "bold"),
axis.ticks = element_blank(),
rect = element_blank(),
panel.grid.major = element_line(colour = 'transparent'))
write_excel_csv2(mapping_profiles, "C:\Users\CHerr\Desktop")
write_excel_csv2(mapping_profiles, "C:/Users/CHerr/Desktop")
write_excel_csv2(mapping_profile, "C:/Users/CHerr/Desktop", col_names = TRUE)
write_excel_csv2(mapping_profiles, "C:/Users/CHerr/Desktop", col_names = TRUE)
select(mapping_profiles, -geometry) %>% write_excel_csv2("C:/Users/CHerr/Desktop", col_names = TRUE)
select(mapping_profiles, -geometry) %>% write_excel_csv2("C:/Users/CHerr/Desktop/cde_dataframe.csv", col_names = TRUE)
select(mapping_profiles, -geometry) %>% write.csv("C:/Users/CHerr/Desktop/cde_dataframe.csv", col_names = TRUE)
select(mapping_profiles, -geometry) %>% write.csv("C:/Users/CHerr/Desktop/cde_dataframe.csv")
select(mapping_profiles, -geometry) %>% write_excel_csv("C:/Users/CHerr/Desktop/cde_dataframe.csv", col_names = TRUE)
install.packages("xlsx")
library(xlsx)
library(xlsxjars)
select(mapping_profiles, -geometry) %>% write.table("C:/Users/CHerr/Desktop/cde_dataframe.text", sep = "\t")
select(mapping_profiles, everything(), -geometry) %>% write.table("C:/Users/CHerr/Desktop/cde_dataframe.text", sep = "\t")
select(mapping_profiles, snack)
mapping_profiles %>%  st_set_geometry(NULL)
mapping_profiles %>%  st_set_geometry(NULL) %>% write.table("C:/Users/CHerr/Desktop/cde_dataframe.text", sep = "\t")
mapping_profiles %>%  st_set_geometry(NULL) %>% write.table("C:/Users/CHerr/Desktop/cde_dataframe.txt", sep = "\t")
mapping_profiles %>%  st_set_geometry(NULL) %>% write.csv("C:/Users/CHerr/Desktop/cde_dataframe.txt")
mapping_profiles %>%  st_set_geometry(NULL) %>% write.csv("C:/Users/CHerr/Desktop/cde_dataframe.csv")
### Plots of different variables
mapping_profiles %>%
filter(school_year == 2017) %>%
ggplot() +
geom_histogram(aes(x = Scored_adp)) +
facet_grid(~urban_rural)
mapping_profiles %>%
filter(school_year == 2017) %>%
ggplot() +
geom_histogram(aes(x = Scored_district_size )) +
facet_wrap(~nslp_sbp_asp_sfsp) +
labs(title = "Public School Districts Currently Operating All Four \nKey Programs Compared to Scored District Size",
subtitle = "Key Programs: NSLP, SBP, ASP, SFSP. Operating in at least 1 school",
x = "District Size score",
y = "Number of Districts",
caption = " Based on 2017 data") +
theme_minimal() +
theme(plot.title = element_text(size = 20, face = "bold"))
mapping_profiles %>%
filter(school_year == 2016) %>%
ggplot() +
geom_histogram(aes(x = Scored_district_size )) +
facet_wrap(~nslp_sbp_asp) +
labs(title = "Has 3 key programs compared to scored district size",
subtitle = " NSLP, SBP, ASP",
x = "District Size score",
y = "Number of Districts",
caption = " Based on 2016 data") +
theme_minimal()
